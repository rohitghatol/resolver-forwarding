# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Comment implements Node {
  id: ID!
  name: String!
  description: String
  active: Boolean
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
}

type Level1 implements Node {
  id: ID!
  name: String!
  description: String
  active: Boolean
  children(where: Level2WhereInput, orderBy: Level2OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Level2!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
}

type Level2 implements Node {
  id: ID!
  name: String!
  description: String
  active: Boolean
  parent(where: Level1WhereInput): Level1
  children(where: Level3WhereInput, orderBy: Level3OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Level3!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
}

type Level3 implements Node {
  id: ID!
  name: String!
  description: String
  active: Boolean
  parent(where: Level2WhereInput): Level2
  children(where: Level4WhereInput, orderBy: Level4OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Level4!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
}

type Level4 implements Node {
  id: ID!
  name: String!
  description: String
  active: Boolean
  parent(where: Level3WhereInput): Level3
  children(where: Level5WhereInput, orderBy: Level5OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Level5!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
}

type Level5 implements Node {
  id: ID!
  name: String!
  description: String
  active: Boolean
  parent(where: Level4WhereInput): Level4
  children(where: Level5WhereInput, orderBy: Level5OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Level5!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
}

type Level6 implements Node {
  id: ID!
  name: String!
  description: String
  active: Boolean
  parent(where: Level5WhereInput): Level5
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
}


#
# Other Types
#

type AggregateComment {
  count: Int!
}

type AggregateLevel1 {
  count: Int!
}

type AggregateLevel2 {
  count: Int!
}

type AggregateLevel3 {
  count: Int!
}

type AggregateLevel4 {
  count: Int!
}

type AggregateLevel5 {
  count: Int!
}

type AggregateLevel6 {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
A connection to a list of items.
"""
type CommentConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  name: String!
  description: String
  active: Boolean
  comments: CommentCreateManyWithoutCommentsInput
}

input CommentCreateManyInput {
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutCommentsInput {
  create: [CommentCreateWithoutCommentsInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutCommentsInput {
  name: String!
  description: String
  active: Boolean
}

"""
An edge in a connection.
"""
type CommentEdge {
  """
  The item at the end of the edge.
  """
  node: Comment!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  active_ASC
  active_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CommentPreviousValues {
  id: ID!
  name: String!
  description: String
  active: Boolean
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CommentSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CommentSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
}

input CommentUpdateDataInput {
  name: String
  description: String
  active: Boolean
  comments: CommentUpdateManyWithoutCommentsInput
}

input CommentUpdateInput {
  name: String
  description: String
  active: Boolean
  comments: CommentUpdateManyWithoutCommentsInput
}

input CommentUpdateManyInput {
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateNestedInput!]
  upsert: [CommentUpsertNestedInput!]
}

input CommentUpdateManyWithoutCommentsInput {
  create: [CommentCreateWithoutCommentsInput!]
  connect: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithoutCommentsInput!]
  upsert: [CommentUpsertWithoutCommentsInput!]
}

input CommentUpdateNestedInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateDataInput!
}

input CommentUpdateWithoutCommentsDataInput {
  name: String
  description: String
  active: Boolean
}

input CommentUpdateWithoutCommentsInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutCommentsDataInput!
}

input CommentUpsertNestedInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateDataInput!
  create: CommentCreateInput!
}

input CommentUpsertWithoutCommentsInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutCommentsDataInput!
  create: CommentCreateWithoutCommentsInput!
}

input CommentWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CommentWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CommentWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  description: String
  """
  All values that are not equal to given value.
  """
  description_not: String
  """
  All values that are contained in given list.
  """
  description_in: [String!]
  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]
  """
  All values less than the given value.
  """
  description_lt: String
  """
  All values less than or equal the given value.
  """
  description_lte: String
  """
  All values greater than the given value.
  """
  description_gt: String
  """
  All values greater than or equal the given value.
  """
  description_gte: String
  """
  All values containing the given string.
  """
  description_contains: String
  """
  All values not containing the given string.
  """
  description_not_contains: String
  """
  All values starting with the given string.
  """
  description_starts_with: String
  """
  All values not starting with the given string.
  """
  description_not_starts_with: String
  """
  All values ending with the given string.
  """
  description_ends_with: String
  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  active: Boolean
  """
  All values that are not equal to given value.
  """
  active_not: Boolean
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
}

input CommentWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type Level1Connection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [Level1Edge]!
  aggregate: AggregateLevel1!
}

input Level1CreateInput {
  name: String!
  description: String
  active: Boolean
  children: Level2CreateManyWithoutParentInput
  comments: CommentCreateManyInput
}

input Level1CreateOneWithoutChildrenInput {
  create: Level1CreateWithoutChildrenInput
  connect: Level1WhereUniqueInput
}

input Level1CreateWithoutChildrenInput {
  name: String!
  description: String
  active: Boolean
  comments: CommentCreateManyInput
}

"""
An edge in a connection.
"""
type Level1Edge {
  """
  The item at the end of the edge.
  """
  node: Level1!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Level1OrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  active_ASC
  active_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type Level1PreviousValues {
  id: ID!
  name: String!
  description: String
  active: Boolean
}

type Level1SubscriptionPayload {
  mutation: MutationType!
  node: Level1
  updatedFields: [String!]
  previousValues: Level1PreviousValues
}

input Level1SubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Level1SubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [Level1SubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Level1WhereInput
}

input Level1UpdateInput {
  name: String
  description: String
  active: Boolean
  children: Level2UpdateManyWithoutParentInput
  comments: CommentUpdateManyInput
}

input Level1UpdateOneWithoutChildrenInput {
  create: Level1CreateWithoutChildrenInput
  connect: Level1WhereUniqueInput
  disconnect: Level1WhereUniqueInput
  delete: Level1WhereUniqueInput
  update: Level1UpdateWithoutChildrenInput
  upsert: Level1UpsertWithoutChildrenInput
}

input Level1UpdateWithoutChildrenDataInput {
  name: String
  description: String
  active: Boolean
  comments: CommentUpdateManyInput
}

input Level1UpdateWithoutChildrenInput {
  where: Level1WhereUniqueInput!
  data: Level1UpdateWithoutChildrenDataInput!
}

input Level1UpsertWithoutChildrenInput {
  where: Level1WhereUniqueInput!
  update: Level1UpdateWithoutChildrenDataInput!
  create: Level1CreateWithoutChildrenInput!
}

input Level1WhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Level1WhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [Level1WhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  description: String
  """
  All values that are not equal to given value.
  """
  description_not: String
  """
  All values that are contained in given list.
  """
  description_in: [String!]
  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]
  """
  All values less than the given value.
  """
  description_lt: String
  """
  All values less than or equal the given value.
  """
  description_lte: String
  """
  All values greater than the given value.
  """
  description_gt: String
  """
  All values greater than or equal the given value.
  """
  description_gte: String
  """
  All values containing the given string.
  """
  description_contains: String
  """
  All values not containing the given string.
  """
  description_not_contains: String
  """
  All values starting with the given string.
  """
  description_starts_with: String
  """
  All values not starting with the given string.
  """
  description_not_starts_with: String
  """
  All values ending with the given string.
  """
  description_ends_with: String
  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  active: Boolean
  """
  All values that are not equal to given value.
  """
  active_not: Boolean
  children_every: Level2WhereInput
  children_some: Level2WhereInput
  children_none: Level2WhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
}

input Level1WhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type Level2Connection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [Level2Edge]!
  aggregate: AggregateLevel2!
}

input Level2CreateInput {
  name: String!
  description: String
  active: Boolean
  parent: Level1CreateOneWithoutChildrenInput
  children: Level3CreateManyWithoutParentInput
  comments: CommentCreateManyInput
}

input Level2CreateManyWithoutParentInput {
  create: [Level2CreateWithoutParentInput!]
  connect: [Level2WhereUniqueInput!]
}

input Level2CreateOneWithoutChildrenInput {
  create: Level2CreateWithoutChildrenInput
  connect: Level2WhereUniqueInput
}

input Level2CreateWithoutChildrenInput {
  name: String!
  description: String
  active: Boolean
  parent: Level1CreateOneWithoutChildrenInput
  comments: CommentCreateManyInput
}

input Level2CreateWithoutParentInput {
  name: String!
  description: String
  active: Boolean
  children: Level3CreateManyWithoutParentInput
  comments: CommentCreateManyInput
}

"""
An edge in a connection.
"""
type Level2Edge {
  """
  The item at the end of the edge.
  """
  node: Level2!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Level2OrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  active_ASC
  active_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type Level2PreviousValues {
  id: ID!
  name: String!
  description: String
  active: Boolean
}

type Level2SubscriptionPayload {
  mutation: MutationType!
  node: Level2
  updatedFields: [String!]
  previousValues: Level2PreviousValues
}

input Level2SubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Level2SubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [Level2SubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Level2WhereInput
}

input Level2UpdateInput {
  name: String
  description: String
  active: Boolean
  parent: Level1UpdateOneWithoutChildrenInput
  children: Level3UpdateManyWithoutParentInput
  comments: CommentUpdateManyInput
}

input Level2UpdateManyWithoutParentInput {
  create: [Level2CreateWithoutParentInput!]
  connect: [Level2WhereUniqueInput!]
  disconnect: [Level2WhereUniqueInput!]
  delete: [Level2WhereUniqueInput!]
  update: [Level2UpdateWithoutParentInput!]
  upsert: [Level2UpsertWithoutParentInput!]
}

input Level2UpdateOneWithoutChildrenInput {
  create: Level2CreateWithoutChildrenInput
  connect: Level2WhereUniqueInput
  disconnect: Level2WhereUniqueInput
  delete: Level2WhereUniqueInput
  update: Level2UpdateWithoutChildrenInput
  upsert: Level2UpsertWithoutChildrenInput
}

input Level2UpdateWithoutChildrenDataInput {
  name: String
  description: String
  active: Boolean
  parent: Level1UpdateOneWithoutChildrenInput
  comments: CommentUpdateManyInput
}

input Level2UpdateWithoutChildrenInput {
  where: Level2WhereUniqueInput!
  data: Level2UpdateWithoutChildrenDataInput!
}

input Level2UpdateWithoutParentDataInput {
  name: String
  description: String
  active: Boolean
  children: Level3UpdateManyWithoutParentInput
  comments: CommentUpdateManyInput
}

input Level2UpdateWithoutParentInput {
  where: Level2WhereUniqueInput!
  data: Level2UpdateWithoutParentDataInput!
}

input Level2UpsertWithoutChildrenInput {
  where: Level2WhereUniqueInput!
  update: Level2UpdateWithoutChildrenDataInput!
  create: Level2CreateWithoutChildrenInput!
}

input Level2UpsertWithoutParentInput {
  where: Level2WhereUniqueInput!
  update: Level2UpdateWithoutParentDataInput!
  create: Level2CreateWithoutParentInput!
}

input Level2WhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Level2WhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [Level2WhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  description: String
  """
  All values that are not equal to given value.
  """
  description_not: String
  """
  All values that are contained in given list.
  """
  description_in: [String!]
  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]
  """
  All values less than the given value.
  """
  description_lt: String
  """
  All values less than or equal the given value.
  """
  description_lte: String
  """
  All values greater than the given value.
  """
  description_gt: String
  """
  All values greater than or equal the given value.
  """
  description_gte: String
  """
  All values containing the given string.
  """
  description_contains: String
  """
  All values not containing the given string.
  """
  description_not_contains: String
  """
  All values starting with the given string.
  """
  description_starts_with: String
  """
  All values not starting with the given string.
  """
  description_not_starts_with: String
  """
  All values ending with the given string.
  """
  description_ends_with: String
  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  active: Boolean
  """
  All values that are not equal to given value.
  """
  active_not: Boolean
  parent: Level1WhereInput
  children_every: Level3WhereInput
  children_some: Level3WhereInput
  children_none: Level3WhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
}

input Level2WhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type Level3Connection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [Level3Edge]!
  aggregate: AggregateLevel3!
}

input Level3CreateInput {
  name: String!
  description: String
  active: Boolean
  parent: Level2CreateOneWithoutChildrenInput
  children: Level4CreateManyWithoutParentInput
  comments: CommentCreateManyInput
}

input Level3CreateManyWithoutParentInput {
  create: [Level3CreateWithoutParentInput!]
  connect: [Level3WhereUniqueInput!]
}

input Level3CreateOneWithoutChildrenInput {
  create: Level3CreateWithoutChildrenInput
  connect: Level3WhereUniqueInput
}

input Level3CreateWithoutChildrenInput {
  name: String!
  description: String
  active: Boolean
  parent: Level2CreateOneWithoutChildrenInput
  comments: CommentCreateManyInput
}

input Level3CreateWithoutParentInput {
  name: String!
  description: String
  active: Boolean
  children: Level4CreateManyWithoutParentInput
  comments: CommentCreateManyInput
}

"""
An edge in a connection.
"""
type Level3Edge {
  """
  The item at the end of the edge.
  """
  node: Level3!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Level3OrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  active_ASC
  active_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type Level3PreviousValues {
  id: ID!
  name: String!
  description: String
  active: Boolean
}

type Level3SubscriptionPayload {
  mutation: MutationType!
  node: Level3
  updatedFields: [String!]
  previousValues: Level3PreviousValues
}

input Level3SubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Level3SubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [Level3SubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Level3WhereInput
}

input Level3UpdateInput {
  name: String
  description: String
  active: Boolean
  parent: Level2UpdateOneWithoutChildrenInput
  children: Level4UpdateManyWithoutParentInput
  comments: CommentUpdateManyInput
}

input Level3UpdateManyWithoutParentInput {
  create: [Level3CreateWithoutParentInput!]
  connect: [Level3WhereUniqueInput!]
  disconnect: [Level3WhereUniqueInput!]
  delete: [Level3WhereUniqueInput!]
  update: [Level3UpdateWithoutParentInput!]
  upsert: [Level3UpsertWithoutParentInput!]
}

input Level3UpdateOneWithoutChildrenInput {
  create: Level3CreateWithoutChildrenInput
  connect: Level3WhereUniqueInput
  disconnect: Level3WhereUniqueInput
  delete: Level3WhereUniqueInput
  update: Level3UpdateWithoutChildrenInput
  upsert: Level3UpsertWithoutChildrenInput
}

input Level3UpdateWithoutChildrenDataInput {
  name: String
  description: String
  active: Boolean
  parent: Level2UpdateOneWithoutChildrenInput
  comments: CommentUpdateManyInput
}

input Level3UpdateWithoutChildrenInput {
  where: Level3WhereUniqueInput!
  data: Level3UpdateWithoutChildrenDataInput!
}

input Level3UpdateWithoutParentDataInput {
  name: String
  description: String
  active: Boolean
  children: Level4UpdateManyWithoutParentInput
  comments: CommentUpdateManyInput
}

input Level3UpdateWithoutParentInput {
  where: Level3WhereUniqueInput!
  data: Level3UpdateWithoutParentDataInput!
}

input Level3UpsertWithoutChildrenInput {
  where: Level3WhereUniqueInput!
  update: Level3UpdateWithoutChildrenDataInput!
  create: Level3CreateWithoutChildrenInput!
}

input Level3UpsertWithoutParentInput {
  where: Level3WhereUniqueInput!
  update: Level3UpdateWithoutParentDataInput!
  create: Level3CreateWithoutParentInput!
}

input Level3WhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Level3WhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [Level3WhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  description: String
  """
  All values that are not equal to given value.
  """
  description_not: String
  """
  All values that are contained in given list.
  """
  description_in: [String!]
  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]
  """
  All values less than the given value.
  """
  description_lt: String
  """
  All values less than or equal the given value.
  """
  description_lte: String
  """
  All values greater than the given value.
  """
  description_gt: String
  """
  All values greater than or equal the given value.
  """
  description_gte: String
  """
  All values containing the given string.
  """
  description_contains: String
  """
  All values not containing the given string.
  """
  description_not_contains: String
  """
  All values starting with the given string.
  """
  description_starts_with: String
  """
  All values not starting with the given string.
  """
  description_not_starts_with: String
  """
  All values ending with the given string.
  """
  description_ends_with: String
  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  active: Boolean
  """
  All values that are not equal to given value.
  """
  active_not: Boolean
  parent: Level2WhereInput
  children_every: Level4WhereInput
  children_some: Level4WhereInput
  children_none: Level4WhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
}

input Level3WhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type Level4Connection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [Level4Edge]!
  aggregate: AggregateLevel4!
}

input Level4CreateInput {
  name: String!
  description: String
  active: Boolean
  parent: Level3CreateOneWithoutChildrenInput
  children: Level5CreateManyWithoutParentInput
  comments: CommentCreateManyInput
}

input Level4CreateManyWithoutParentInput {
  create: [Level4CreateWithoutParentInput!]
  connect: [Level4WhereUniqueInput!]
}

input Level4CreateOneWithoutChildrenInput {
  create: Level4CreateWithoutChildrenInput
  connect: Level4WhereUniqueInput
}

input Level4CreateWithoutChildrenInput {
  name: String!
  description: String
  active: Boolean
  parent: Level3CreateOneWithoutChildrenInput
  comments: CommentCreateManyInput
}

input Level4CreateWithoutParentInput {
  name: String!
  description: String
  active: Boolean
  children: Level5CreateManyWithoutParentInput
  comments: CommentCreateManyInput
}

"""
An edge in a connection.
"""
type Level4Edge {
  """
  The item at the end of the edge.
  """
  node: Level4!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Level4OrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  active_ASC
  active_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type Level4PreviousValues {
  id: ID!
  name: String!
  description: String
  active: Boolean
}

type Level4SubscriptionPayload {
  mutation: MutationType!
  node: Level4
  updatedFields: [String!]
  previousValues: Level4PreviousValues
}

input Level4SubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Level4SubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [Level4SubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Level4WhereInput
}

input Level4UpdateInput {
  name: String
  description: String
  active: Boolean
  parent: Level3UpdateOneWithoutChildrenInput
  children: Level5UpdateManyWithoutParentInput
  comments: CommentUpdateManyInput
}

input Level4UpdateManyWithoutParentInput {
  create: [Level4CreateWithoutParentInput!]
  connect: [Level4WhereUniqueInput!]
  disconnect: [Level4WhereUniqueInput!]
  delete: [Level4WhereUniqueInput!]
  update: [Level4UpdateWithoutParentInput!]
  upsert: [Level4UpsertWithoutParentInput!]
}

input Level4UpdateOneWithoutChildrenInput {
  create: Level4CreateWithoutChildrenInput
  connect: Level4WhereUniqueInput
  disconnect: Level4WhereUniqueInput
  delete: Level4WhereUniqueInput
  update: Level4UpdateWithoutChildrenInput
  upsert: Level4UpsertWithoutChildrenInput
}

input Level4UpdateWithoutChildrenDataInput {
  name: String
  description: String
  active: Boolean
  parent: Level3UpdateOneWithoutChildrenInput
  comments: CommentUpdateManyInput
}

input Level4UpdateWithoutChildrenInput {
  where: Level4WhereUniqueInput!
  data: Level4UpdateWithoutChildrenDataInput!
}

input Level4UpdateWithoutParentDataInput {
  name: String
  description: String
  active: Boolean
  children: Level5UpdateManyWithoutParentInput
  comments: CommentUpdateManyInput
}

input Level4UpdateWithoutParentInput {
  where: Level4WhereUniqueInput!
  data: Level4UpdateWithoutParentDataInput!
}

input Level4UpsertWithoutChildrenInput {
  where: Level4WhereUniqueInput!
  update: Level4UpdateWithoutChildrenDataInput!
  create: Level4CreateWithoutChildrenInput!
}

input Level4UpsertWithoutParentInput {
  where: Level4WhereUniqueInput!
  update: Level4UpdateWithoutParentDataInput!
  create: Level4CreateWithoutParentInput!
}

input Level4WhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Level4WhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [Level4WhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  description: String
  """
  All values that are not equal to given value.
  """
  description_not: String
  """
  All values that are contained in given list.
  """
  description_in: [String!]
  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]
  """
  All values less than the given value.
  """
  description_lt: String
  """
  All values less than or equal the given value.
  """
  description_lte: String
  """
  All values greater than the given value.
  """
  description_gt: String
  """
  All values greater than or equal the given value.
  """
  description_gte: String
  """
  All values containing the given string.
  """
  description_contains: String
  """
  All values not containing the given string.
  """
  description_not_contains: String
  """
  All values starting with the given string.
  """
  description_starts_with: String
  """
  All values not starting with the given string.
  """
  description_not_starts_with: String
  """
  All values ending with the given string.
  """
  description_ends_with: String
  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  active: Boolean
  """
  All values that are not equal to given value.
  """
  active_not: Boolean
  parent: Level3WhereInput
  children_every: Level5WhereInput
  children_some: Level5WhereInput
  children_none: Level5WhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
}

input Level4WhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type Level5Connection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [Level5Edge]!
  aggregate: AggregateLevel5!
}

input Level5CreateInput {
  name: String!
  description: String
  active: Boolean
  parent: Level4CreateOneWithoutChildrenInput
  children: Level5CreateManyWithoutChildrenInput
  comments: CommentCreateManyInput
}

input Level5CreateManyWithoutChildrenInput {
  create: [Level5CreateWithoutChildrenInput!]
  connect: [Level5WhereUniqueInput!]
}

input Level5CreateManyWithoutParentInput {
  create: [Level5CreateWithoutParentInput!]
  connect: [Level5WhereUniqueInput!]
}

input Level5CreateOneInput {
  create: Level5CreateInput
  connect: Level5WhereUniqueInput
}

input Level5CreateWithoutChildrenInput {
  name: String!
  description: String
  active: Boolean
  parent: Level4CreateOneWithoutChildrenInput
  comments: CommentCreateManyInput
}

input Level5CreateWithoutParentInput {
  name: String!
  description: String
  active: Boolean
  children: Level5CreateManyWithoutChildrenInput
  comments: CommentCreateManyInput
}

"""
An edge in a connection.
"""
type Level5Edge {
  """
  The item at the end of the edge.
  """
  node: Level5!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Level5OrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  active_ASC
  active_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type Level5PreviousValues {
  id: ID!
  name: String!
  description: String
  active: Boolean
}

type Level5SubscriptionPayload {
  mutation: MutationType!
  node: Level5
  updatedFields: [String!]
  previousValues: Level5PreviousValues
}

input Level5SubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Level5SubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [Level5SubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Level5WhereInput
}

input Level5UpdateDataInput {
  name: String
  description: String
  active: Boolean
  parent: Level4UpdateOneWithoutChildrenInput
  children: Level5UpdateManyWithoutChildrenInput
  comments: CommentUpdateManyInput
}

input Level5UpdateInput {
  name: String
  description: String
  active: Boolean
  parent: Level4UpdateOneWithoutChildrenInput
  children: Level5UpdateManyWithoutChildrenInput
  comments: CommentUpdateManyInput
}

input Level5UpdateManyWithoutChildrenInput {
  create: [Level5CreateWithoutChildrenInput!]
  connect: [Level5WhereUniqueInput!]
  disconnect: [Level5WhereUniqueInput!]
  delete: [Level5WhereUniqueInput!]
  update: [Level5UpdateWithoutChildrenInput!]
  upsert: [Level5UpsertWithoutChildrenInput!]
}

input Level5UpdateManyWithoutParentInput {
  create: [Level5CreateWithoutParentInput!]
  connect: [Level5WhereUniqueInput!]
  disconnect: [Level5WhereUniqueInput!]
  delete: [Level5WhereUniqueInput!]
  update: [Level5UpdateWithoutParentInput!]
  upsert: [Level5UpsertWithoutParentInput!]
}

input Level5UpdateNestedInput {
  where: Level5WhereUniqueInput!
  data: Level5UpdateDataInput!
}

input Level5UpdateOneInput {
  create: Level5CreateInput
  connect: Level5WhereUniqueInput
  disconnect: Level5WhereUniqueInput
  delete: Level5WhereUniqueInput
  update: Level5UpdateNestedInput
  upsert: Level5UpsertNestedInput
}

input Level5UpdateWithoutChildrenDataInput {
  name: String
  description: String
  active: Boolean
  parent: Level4UpdateOneWithoutChildrenInput
  comments: CommentUpdateManyInput
}

input Level5UpdateWithoutChildrenInput {
  where: Level5WhereUniqueInput!
  data: Level5UpdateWithoutChildrenDataInput!
}

input Level5UpdateWithoutParentDataInput {
  name: String
  description: String
  active: Boolean
  children: Level5UpdateManyWithoutChildrenInput
  comments: CommentUpdateManyInput
}

input Level5UpdateWithoutParentInput {
  where: Level5WhereUniqueInput!
  data: Level5UpdateWithoutParentDataInput!
}

input Level5UpsertNestedInput {
  where: Level5WhereUniqueInput!
  update: Level5UpdateDataInput!
  create: Level5CreateInput!
}

input Level5UpsertWithoutChildrenInput {
  where: Level5WhereUniqueInput!
  update: Level5UpdateWithoutChildrenDataInput!
  create: Level5CreateWithoutChildrenInput!
}

input Level5UpsertWithoutParentInput {
  where: Level5WhereUniqueInput!
  update: Level5UpdateWithoutParentDataInput!
  create: Level5CreateWithoutParentInput!
}

input Level5WhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Level5WhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [Level5WhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  description: String
  """
  All values that are not equal to given value.
  """
  description_not: String
  """
  All values that are contained in given list.
  """
  description_in: [String!]
  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]
  """
  All values less than the given value.
  """
  description_lt: String
  """
  All values less than or equal the given value.
  """
  description_lte: String
  """
  All values greater than the given value.
  """
  description_gt: String
  """
  All values greater than or equal the given value.
  """
  description_gte: String
  """
  All values containing the given string.
  """
  description_contains: String
  """
  All values not containing the given string.
  """
  description_not_contains: String
  """
  All values starting with the given string.
  """
  description_starts_with: String
  """
  All values not starting with the given string.
  """
  description_not_starts_with: String
  """
  All values ending with the given string.
  """
  description_ends_with: String
  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  active: Boolean
  """
  All values that are not equal to given value.
  """
  active_not: Boolean
  parent: Level4WhereInput
  children_every: Level5WhereInput
  children_some: Level5WhereInput
  children_none: Level5WhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
}

input Level5WhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type Level6Connection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [Level6Edge]!
  aggregate: AggregateLevel6!
}

input Level6CreateInput {
  name: String!
  description: String
  active: Boolean
  parent: Level5CreateOneInput
  comments: CommentCreateManyInput
}

"""
An edge in a connection.
"""
type Level6Edge {
  """
  The item at the end of the edge.
  """
  node: Level6!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Level6OrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  active_ASC
  active_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type Level6PreviousValues {
  id: ID!
  name: String!
  description: String
  active: Boolean
}

type Level6SubscriptionPayload {
  mutation: MutationType!
  node: Level6
  updatedFields: [String!]
  previousValues: Level6PreviousValues
}

input Level6SubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Level6SubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [Level6SubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Level6WhereInput
}

input Level6UpdateInput {
  name: String
  description: String
  active: Boolean
  parent: Level5UpdateOneInput
  comments: CommentUpdateManyInput
}

input Level6WhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Level6WhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [Level6WhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  description: String
  """
  All values that are not equal to given value.
  """
  description_not: String
  """
  All values that are contained in given list.
  """
  description_in: [String!]
  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]
  """
  All values less than the given value.
  """
  description_lt: String
  """
  All values less than or equal the given value.
  """
  description_lte: String
  """
  All values greater than the given value.
  """
  description_gt: String
  """
  All values greater than or equal the given value.
  """
  description_gte: String
  """
  All values containing the given string.
  """
  description_contains: String
  """
  All values not containing the given string.
  """
  description_not_contains: String
  """
  All values starting with the given string.
  """
  description_starts_with: String
  """
  All values not starting with the given string.
  """
  description_not_starts_with: String
  """
  All values ending with the given string.
  """
  description_ends_with: String
  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  active: Boolean
  """
  All values that are not equal to given value.
  """
  active_not: Boolean
  parent: Level5WhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
}

input Level6WhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createLevel1(data: Level1CreateInput!): Level1!
  createLevel2(data: Level2CreateInput!): Level2!
  createLevel3(data: Level3CreateInput!): Level3!
  createLevel4(data: Level4CreateInput!): Level4!
  createLevel5(data: Level5CreateInput!): Level5!
  createLevel6(data: Level6CreateInput!): Level6!
  createComment(data: CommentCreateInput!): Comment!
  updateLevel1(data: Level1UpdateInput!, where: Level1WhereUniqueInput!): Level1
  updateLevel2(data: Level2UpdateInput!, where: Level2WhereUniqueInput!): Level2
  updateLevel3(data: Level3UpdateInput!, where: Level3WhereUniqueInput!): Level3
  updateLevel4(data: Level4UpdateInput!, where: Level4WhereUniqueInput!): Level4
  updateLevel5(data: Level5UpdateInput!, where: Level5WhereUniqueInput!): Level5
  updateLevel6(data: Level6UpdateInput!, where: Level6WhereUniqueInput!): Level6
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  deleteLevel1(where: Level1WhereUniqueInput!): Level1
  deleteLevel2(where: Level2WhereUniqueInput!): Level2
  deleteLevel3(where: Level3WhereUniqueInput!): Level3
  deleteLevel4(where: Level4WhereUniqueInput!): Level4
  deleteLevel5(where: Level5WhereUniqueInput!): Level5
  deleteLevel6(where: Level6WhereUniqueInput!): Level6
  deleteComment(where: CommentWhereUniqueInput!): Comment
  upsertLevel1(where: Level1WhereUniqueInput!, create: Level1CreateInput!, update: Level1UpdateInput!): Level1!
  upsertLevel2(where: Level2WhereUniqueInput!, create: Level2CreateInput!, update: Level2UpdateInput!): Level2!
  upsertLevel3(where: Level3WhereUniqueInput!, create: Level3CreateInput!, update: Level3UpdateInput!): Level3!
  upsertLevel4(where: Level4WhereUniqueInput!, create: Level4CreateInput!, update: Level4UpdateInput!): Level4!
  upsertLevel5(where: Level5WhereUniqueInput!, create: Level5CreateInput!, update: Level5UpdateInput!): Level5!
  upsertLevel6(where: Level6WhereUniqueInput!, create: Level6CreateInput!, update: Level6UpdateInput!): Level6!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  updateManyLevel1s(data: Level1UpdateInput!, where: Level1WhereInput!): BatchPayload!
  updateManyLevel2s(data: Level2UpdateInput!, where: Level2WhereInput!): BatchPayload!
  updateManyLevel3s(data: Level3UpdateInput!, where: Level3WhereInput!): BatchPayload!
  updateManyLevel4s(data: Level4UpdateInput!, where: Level4WhereInput!): BatchPayload!
  updateManyLevel5s(data: Level5UpdateInput!, where: Level5WhereInput!): BatchPayload!
  updateManyLevel6s(data: Level6UpdateInput!, where: Level6WhereInput!): BatchPayload!
  updateManyComments(data: CommentUpdateInput!, where: CommentWhereInput!): BatchPayload!
  deleteManyLevel1s(where: Level1WhereInput!): BatchPayload!
  deleteManyLevel2s(where: Level2WhereInput!): BatchPayload!
  deleteManyLevel3s(where: Level3WhereInput!): BatchPayload!
  deleteManyLevel4s(where: Level4WhereInput!): BatchPayload!
  deleteManyLevel5s(where: Level5WhereInput!): BatchPayload!
  deleteManyLevel6s(where: Level6WhereInput!): BatchPayload!
  deleteManyComments(where: CommentWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  level1s(where: Level1WhereInput, orderBy: Level1OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Level1]!
  level2s(where: Level2WhereInput, orderBy: Level2OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Level2]!
  level3s(where: Level3WhereInput, orderBy: Level3OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Level3]!
  level4s(where: Level4WhereInput, orderBy: Level4OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Level4]!
  level5s(where: Level5WhereInput, orderBy: Level5OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Level5]!
  level6s(where: Level6WhereInput, orderBy: Level6OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Level6]!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  level1(where: Level1WhereUniqueInput!): Level1
  level2(where: Level2WhereUniqueInput!): Level2
  level3(where: Level3WhereUniqueInput!): Level3
  level4(where: Level4WhereUniqueInput!): Level4
  level5(where: Level5WhereUniqueInput!): Level5
  level6(where: Level6WhereUniqueInput!): Level6
  comment(where: CommentWhereUniqueInput!): Comment
  level1sConnection(where: Level1WhereInput, orderBy: Level1OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Level1Connection!
  level2sConnection(where: Level2WhereInput, orderBy: Level2OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Level2Connection!
  level3sConnection(where: Level3WhereInput, orderBy: Level3OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Level3Connection!
  level4sConnection(where: Level4WhereInput, orderBy: Level4OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Level4Connection!
  level5sConnection(where: Level5WhereInput, orderBy: Level5OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Level5Connection!
  level6sConnection(where: Level6WhereInput, orderBy: Level6OrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Level6Connection!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  level1(where: Level1SubscriptionWhereInput): Level1SubscriptionPayload
  level2(where: Level2SubscriptionWhereInput): Level2SubscriptionPayload
  level3(where: Level3SubscriptionWhereInput): Level3SubscriptionPayload
  level4(where: Level4SubscriptionWhereInput): Level4SubscriptionPayload
  level5(where: Level5SubscriptionWhereInput): Level5SubscriptionPayload
  level6(where: Level6SubscriptionWhereInput): Level6SubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
}
